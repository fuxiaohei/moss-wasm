// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!

#[allow(clippy::all)]
pub mod kv_storage {
    /// A value is a value of bytes.
    pub type ValueResult = wit_bindgen::rt::vec::Vec<u8>;
    /// A value is a value of bytes.
    pub type ValueParam<'a> = &'a [u8];
    /// kv operation errors
    #[repr(u8)]
    #[derive(Clone, Copy, PartialEq, Eq)]
    pub enum KvError {
        /// The key is not found.
        KeyNotFound,
        /// The key is invalid.
        InvalidKey,
        /// Internal error.
        InternalError,
        /// The Value is too large.
        ValueTooLarge,
    }
    impl KvError {
        pub fn name(&self) -> &'static str {
            match self {
                KvError::KeyNotFound => "key-not-found",
                KvError::InvalidKey => "invalid-key",
                KvError::InternalError => "internal-error",
                KvError::ValueTooLarge => "value-too-large",
            }
        }
        pub fn message(&self) -> &'static str {
            match self {
                KvError::KeyNotFound => "The key is not found.",
                KvError::InvalidKey => "The key is invalid.",
                KvError::InternalError => "Internal error.",
                KvError::ValueTooLarge => "The Value is too large.",
            }
        }
    }
    impl core::fmt::Debug for KvError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            f.debug_struct("KvError")
                .field("code", &(*self as i32))
                .field("name", &self.name())
                .field("message", &self.message())
                .finish()
        }
    }
    impl core::fmt::Display for KvError {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            write!(f, "{} (error {})", self.name(), *self as i32)
        }
    }

    impl std::error::Error for KvError {}
    /// A key is a unique identifier for a value in storage.
    pub type KeyResult = wit_bindgen::rt::string::String;
    /// A key is a unique identifier for a value in storage.
    pub type KeyParam<'a> = &'a str;
    /// A key-value pair.
    pub type Pair = (KeyResult, ValueResult);
    #[allow(clippy::all)]
    /// get value by key
    pub fn get(k: KeyParam<'_>) -> Result<ValueResult, KvError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = k;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "kv-storage")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "kv-storage_get")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok({
                    let len2 = *((ptr1 + 8) as *const i32) as usize;

                    Vec::from_raw_parts(*((ptr1 + 4) as *const i32) as *mut _, len2, len2)
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 4) as *const u8)) {
                            0 => KvError::KeyNotFound,
                            1 => KvError::InvalidKey,
                            2 => KvError::InternalError,
                            3 => KvError::ValueTooLarge,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, KvError>(
                            i32::from(*((ptr1 + 4) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// set value with expire time and value
    pub fn set(k: KeyParam<'_>, v: ValueParam<'_>, expire: u64) -> Result<(), KvError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = k;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec1 = v;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "kv-storage")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "set")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "kv-storage_set")]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i64, _: i32);
            }
            wit_import(
                ptr0,
                len0,
                ptr1,
                len1,
                wit_bindgen::rt::as_i64(expire),
                ptr2,
            );
            match i32::from(*((ptr2 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr2 + 1) as *const u8)) {
                            0 => KvError::KeyNotFound,
                            1 => KvError::InvalidKey,
                            2 => KvError::InternalError,
                            3 => KvError::ValueTooLarge,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, KvError>(
                            i32::from(*((ptr2 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// delete key and value
    pub fn delete(k: KeyParam<'_>) -> Result<(), KvError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(1))]
            struct RetArea([u8; 2]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = k;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "kv-storage")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "delete")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "kv-storage_delete")]
                fn wit_import(_: i32, _: i32, _: i32);
            }
            wit_import(ptr0, len0, ptr1);
            match i32::from(*((ptr1 + 0) as *const u8)) {
                0 => Ok(()),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr1 + 1) as *const u8)) {
                            0 => KvError::KeyNotFound,
                            1 => KvError::InvalidKey,
                            2 => KvError::InternalError,
                            3 => KvError::ValueTooLarge,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, KvError>(
                            i32::from(*((ptr1 + 1) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
    #[allow(clippy::all)]
    /// lists all keys and values
    pub fn get_all() -> Result<wit_bindgen::rt::vec::Vec<Pair>, KvError> {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, string::String, vec::Vec};
        unsafe {
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[link(wasm_import_module = "kv-storage")]
            extern "C" {
                #[cfg_attr(target_arch = "wasm32", link_name = "get-all")]
                #[cfg_attr(not(target_arch = "wasm32"), link_name = "kv-storage_get-all")]
                fn wit_import(_: i32);
            }
            wit_import(ptr0);
            match i32::from(*((ptr0 + 0) as *const u8)) {
                0 => Ok({
                    let base3 = *((ptr0 + 4) as *const i32);
                    let len3 = *((ptr0 + 8) as *const i32);
                    let mut result3 = Vec::with_capacity(len3 as usize);
                    for i in 0..len3 {
                        let base = base3 + i * 16;
                        result3.push({
                            let len1 = *((base + 4) as *const i32) as usize;
                            let len2 = *((base + 12) as *const i32) as usize;

                            (
                                {
                                    #[cfg(not(debug_assertions))]
                                    {
                                        String::from_utf8_unchecked(Vec::from_raw_parts(
                                            *((base + 0) as *const i32) as *mut _,
                                            len1,
                                            len1,
                                        ))
                                    }
                                    #[cfg(debug_assertions)]
                                    {
                                        String::from_utf8(Vec::from_raw_parts(
                                            *((base + 0) as *const i32) as *mut _,
                                            len1,
                                            len1,
                                        ))
                                        .unwrap()
                                    }
                                },
                                Vec::from_raw_parts(
                                    *((base + 8) as *const i32) as *mut _,
                                    len2,
                                    len2,
                                ),
                            )
                        });
                    }
                    wit_bindgen::rt::dealloc(base3, (len3 as usize) * 16, 4);

                    result3
                }),
                1 => Err({
                    #[cfg(debug_assertions)]
                    {
                        match i32::from(*((ptr0 + 4) as *const u8)) {
                            0 => KvError::KeyNotFound,
                            1 => KvError::InvalidKey,
                            2 => KvError::InternalError,
                            3 => KvError::ValueTooLarge,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                    #[cfg(not(debug_assertions))]
                    {
                        core::mem::transmute::<_, KvError>(
                            i32::from(*((ptr0 + 4) as *const u8)) as u8
                        )
                    }
                }),
                #[cfg(not(debug_assertions))]
                _ => core::hint::unreachable_unchecked(),
                #[cfg(debug_assertions)]
                _ => panic!("invalid enum discriminant"),
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:kv-storage"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 734] = [
    2, 0, 10, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 10, 107, 118, 45, 115, 116, 111, 114,
    97, 103, 101, 10, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 0, 97, 115, 109, 12, 0, 1, 0,
    7, 201, 4, 1, 65, 4, 1, 66, 20, 1, 112, 125, 4, 5, 118, 97, 108, 117, 101, 0, 3, 0, 0, 1, 109,
    4, 13, 107, 101, 121, 45, 110, 111, 116, 45, 102, 111, 117, 110, 100, 11, 105, 110, 118, 97,
    108, 105, 100, 45, 107, 101, 121, 14, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114,
    111, 114, 15, 118, 97, 108, 117, 101, 45, 116, 111, 111, 45, 108, 97, 114, 103, 101, 4, 8, 107,
    118, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 115, 4, 3, 107, 101, 121, 0, 3, 0, 4, 1, 111,
    2, 5, 1, 4, 4, 112, 97, 105, 114, 0, 3, 0, 6, 1, 106, 1, 1, 1, 3, 1, 64, 1, 1, 107, 5, 0, 8, 4,
    3, 103, 101, 116, 0, 1, 9, 1, 106, 0, 1, 3, 1, 64, 3, 1, 107, 5, 1, 118, 1, 6, 101, 120, 112,
    105, 114, 101, 119, 0, 10, 4, 3, 115, 101, 116, 0, 1, 11, 1, 64, 1, 1, 107, 5, 0, 10, 4, 6,
    100, 101, 108, 101, 116, 101, 0, 1, 12, 1, 112, 7, 1, 106, 1, 13, 1, 3, 1, 64, 0, 0, 14, 4, 7,
    103, 101, 116, 45, 97, 108, 108, 0, 1, 15, 4, 18, 107, 118, 45, 115, 116, 111, 114, 97, 103,
    101, 45, 105, 109, 112, 111, 114, 116, 115, 34, 112, 107, 103, 58, 47, 107, 118, 45, 115, 116,
    111, 114, 97, 103, 101, 47, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 45, 105, 109, 112,
    111, 114, 116, 115, 5, 0, 1, 65, 2, 1, 66, 20, 1, 112, 125, 4, 5, 118, 97, 108, 117, 101, 0, 3,
    0, 0, 1, 109, 4, 13, 107, 101, 121, 45, 110, 111, 116, 45, 102, 111, 117, 110, 100, 11, 105,
    110, 118, 97, 108, 105, 100, 45, 107, 101, 121, 14, 105, 110, 116, 101, 114, 110, 97, 108, 45,
    101, 114, 114, 111, 114, 15, 118, 97, 108, 117, 101, 45, 116, 111, 111, 45, 108, 97, 114, 103,
    101, 4, 8, 107, 118, 45, 101, 114, 114, 111, 114, 0, 3, 0, 2, 1, 115, 4, 3, 107, 101, 121, 0,
    3, 0, 4, 1, 111, 2, 5, 1, 4, 4, 112, 97, 105, 114, 0, 3, 0, 6, 1, 106, 1, 1, 1, 3, 1, 64, 1, 1,
    107, 5, 0, 8, 4, 3, 103, 101, 116, 0, 1, 9, 1, 106, 0, 1, 3, 1, 64, 3, 1, 107, 5, 1, 118, 1, 6,
    101, 120, 112, 105, 114, 101, 119, 0, 10, 4, 3, 115, 101, 116, 0, 1, 11, 1, 64, 1, 1, 107, 5,
    0, 10, 4, 6, 100, 101, 108, 101, 116, 101, 0, 1, 12, 1, 112, 7, 1, 106, 1, 13, 1, 3, 1, 64, 0,
    0, 14, 4, 7, 103, 101, 116, 45, 97, 108, 108, 0, 1, 15, 3, 10, 107, 118, 45, 115, 116, 111,
    114, 97, 103, 101, 34, 112, 107, 103, 58, 47, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101,
    47, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 45, 105, 109, 112, 111, 114, 116, 115, 5,
    0, 4, 10, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 26, 112, 107, 103, 58, 47, 107, 118,
    45, 115, 116, 111, 114, 97, 103, 101, 47, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 4, 1,
    0, 68, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115,
    101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 5,
    48, 46, 55, 46, 49, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115,
    116, 5, 48, 46, 51, 46, 48, 11, 31, 1, 10, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 15,
    112, 107, 103, 58, 47, 107, 118, 45, 115, 116, 111, 114, 97, 103, 101, 3, 0, 0,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
